name: GitHub Actions Test
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
    explore-actions:
        runs-on: ubuntu-latest
        steps:
            - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
            - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
            - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
            - name: Check out repository code
              uses: actions/checkout@v4
            - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
            - name: Install Zola
              run: |
                sudo snap install zola --edge
            - name: Build Zola Application
              run: |
                zola build
                echo "Files in build directory"
                ls ${{ github.workspace}}/public
            - name: SSH Connection and File Transfer
              env:
                SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
                REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
                REMOTE_USER: ${{ secrets.REMOTE_USER }}
                REMOTE_PASS: ${{ secrets.REMOTE_PASS }}
              run: |
                echo "$SSH_PRIVATE_KEY" > private_key.pem
                chmod 600 private_key.pem
                
                echo "Attempting SSH connection with key..."
                if ssh -i private_key.pem -o StrictHostKeyChecking=no -o BatchMode=yes $REMOTE_USER@$REMOTE_HOST "echo SSH key authentication successful"; then
                  echo "SSH key authentication successful, proceeding with file operations"
                  SSH_CMD="ssh -i private_key.pem -o StrictHostKeyChecking=no"
                  SCP_CMD="scp -i private_key.pem"
                else
                  echo "SSH key authentication failed, falling back to password authentication"
                  sudo apt-get install -y sshpass
                  SSH_CMD="sshpass -p $REMOTE_PASS ssh -o StrictHostKeyChecking=no"
                  SCP_CMD="sshpass -p $REMOTE_PASS scp"
                fi
                
                $SSH_CMD $REMOTE_USER@$REMOTE_HOST "rm -rf /var/www/html/*"
                $SCP_CMD -r ${{ github.workspace }}/public/* $REMOTE_USER@$REMOTE_HOST:/var/www/html/
                
                rm -f private_key.pem
            - run: echo "üçè This job's status is ${{ job.status }}."